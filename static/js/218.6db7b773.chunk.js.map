{"version":3,"file":"static/js/218.6db7b773.chunk.js","mappings":"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","sources":["Game/utils/getDimension.tsx","Game/utils/getNearestBoardPosition.tsx","Game/Board/BoardDecor.tsx","Game/Board/GameOver.tsx","Game/Board/LeaveGame.tsx","Game/Board/BoardOverlay.tsx","common/Ghosted.tsx","common/Highlight.tsx","common/Point.ts","Game/Board/useDraggablePiece.ts","Game/Board/GoatPiece.tsx","Game/Board/TigerPiece.tsx","Game/Board/BoradPieces.tsx","Game/utils/getHintHighlightPositions.ts","Game/Board/DebugPieceOverlay.tsx","Game/Board/Board.tsx","Game/utils/moveSelector.ts","Game/BoardContainer.tsx","Game/Debug.tsx","Game/GameStatus/GoatCounter.tsx","Game/GameStatus/Hint.tsx","Game/GameStatus/LeaveGameButton.tsx","Game/GameStatus/Options.tsx","Game/GameStatus/Replay.tsx","Game/GameStatus/RulesButton.tsx","Game/GameStatus/GameInfoAndButtons.tsx","Game/utils/winner.ts","Game/Header/MessageBanner.tsx","Game/Header/Turn.tsx","Game/Header/WaitingForOtherPlayer.tsx","Game/Header/GameHeader.tsx","Game/utils/getBoardSizeProps.ts","Game/Game.tsx","Game/utils/useInitializeStates.ts","Game/utils/bestBotMove.ts","Game/utils/possibleMoves.ts"],"sourcesContent":["export type Dimension = {\n  padding: number;\n  spacing: number;\n  start: number;\n  end: number;\n  midPoint: number;\n};\n\nexport default function getDimension(canvasSize: number): Dimension {\n  const padding = canvasSize / 10,\n    boardWidth = canvasSize - padding * 2,\n    spacing = boardWidth / 4;\n  const start = padding,\n    end = canvasSize - padding;\n  const midPoint = (start + end) / 2;\n\n  return { padding, spacing, start, end, midPoint };\n}\n","import { Position } from '../../common/types';\nimport getDimension from './getDimension';\n\nexport default function getNearestBoardPosition(\n  clientX: number,\n  clientY: number,\n  board: HTMLDivElement\n): Position | null {\n  const { padding, spacing } = getDimension(\n    Math.min(\n      board.getBoundingClientRect().width,\n      board.getBoundingClientRect().height\n    )\n  );\n  const clickTolerance = spacing * 0.48 * (spacing * 0.48);\n\n  const x = clientX - board.offsetLeft;\n  const y = clientY - board.offsetTop;\n\n  const i = Math.round((x - (x % spacing)) / spacing);\n  const j = Math.round((y - (y % spacing)) / spacing);\n\n  const actualX = padding + i * spacing;\n  const actualY = padding + j * spacing;\n  const distance =\n    (actualX - x) * (actualX - x) + (actualY - y) * (actualY - y);\n  const closeEnough = distance < clickTolerance;\n\n  if (closeEnough) {\n    // @ts-ignore\n    return j * 5 + i;\n  } else {\n    return null;\n  }\n}\n","import React, { ReactElement, useEffect, useRef } from 'react';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport useGameState from '../reducers/useGameState';\nimport getNearestBoardPosition from '../utils/getNearestBoardPosition';\nimport { gameOver, isTurn } from '../utils/turn';\nimport board from './board.png';\n\ntype Props = { width: number; height: number };\n\nexport default function BoardDecor({ width, height }: Props): ReactElement {\n  const boardRef = useRef<HTMLImageElement | null>(null);\n\n  const [state, stateDispatch] = useGameState();\n  const [gameContext, _] = useGameContext();\n\n  useEffect(() => {\n    if (gameOver(gameContext)) return;\n    const boardImage = boardRef.current!;\n    // @ts-ignore\n    const board: HTMLDivElement = boardImage.parentElement!;\n\n    const onDragEnd = (e: DragEvent | MouseEvent) => {\n      if (!isTurn(state, gameContext.designation)) return;\n      e.preventDefault();\n\n      const boardPosition = getNearestBoardPosition(\n        e.clientX,\n        e.clientY,\n        board\n      );\n      if (boardPosition == null) {\n        stateDispatch({ type: 'select', value: boardPosition });\n      } else {\n        stateDispatch({ type: 'move', value: boardPosition });\n      }\n    };\n\n    const onTouchEnd = (e: TouchEvent) => {\n      if (!isTurn(state, gameContext.designation)) return;\n\n      const _e = e.changedTouches.item(0);\n      if (_e == null) {\n        return null;\n      }\n\n      const boardPosition = getNearestBoardPosition(\n        _e.clientX,\n        _e.clientY,\n        board\n      );\n      if (boardPosition == null) {\n        stateDispatch({ type: 'select', value: boardPosition });\n      } else {\n        stateDispatch({ type: 'move', value: boardPosition });\n      }\n    };\n\n    const onClick = (e: MouseEvent) => {\n      if (!isTurn(state, gameContext.designation)) {\n        stateDispatch({ type: 'selected_without_turn' });\n      } else {\n        const boardPosition = getNearestBoardPosition(\n          e.clientX,\n          e.clientY,\n          board\n        );\n        if (state.selectedPiece == null || boardPosition == null) {\n          stateDispatch({ type: 'select', value: boardPosition });\n        } else {\n          stateDispatch({ type: 'move', value: boardPosition });\n        }\n      }\n    };\n\n    board.addEventListener('click', onClick);\n    board.addEventListener('mouseup', onDragEnd);\n    board.addEventListener('dragend', onDragEnd);\n    board.addEventListener('touchend', onTouchEnd);\n\n    return () => {\n      board.removeEventListener('click', onClick);\n      board.removeEventListener('mouseup', onDragEnd);\n      board.removeEventListener('dragend', onDragEnd);\n      board.removeEventListener('touchend', onTouchEnd);\n    };\n  }, [boardRef.current, state.moves, gameContext.designation]);\n\n  return <img alt=\"board\" ref={boardRef} src={board} height={height} width={width} />;\n}\n","import '../../styles/BoardOverlay.css';\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport { gameOver } from '../utils/turn';\n\nexport function GameOver() {\n  const gameContext = useGameContext()[0];\n\n  if (!gameOver(gameContext)) {\n    return <></>;\n  }\n\n  const { winner, designation, gameType } = gameContext;\n\n  let displayText = `${winner} won`;\n  if (gameType == 'self') {\n    // default text\n  } else if (designation == winner) {\n    displayText = 'You won!';\n  } else if (designation != winner) {\n    displayText = 'You lost!';\n  }\n\n  return (\n    <div className=\"boardOverlayContainer\">\n      <div>{displayText}</div>\n      <Link to=\"/new\">\n        <button className=\"pill playNewGameButton\"> Play new game </button>\n      </Link>\n    </div>\n  );\n}\n","import '../../styles/BoardOverlay.css';\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useGameContext from '../../reducers/useGameContext';\n\nexport default function LeaveGame() {\n  const [{ showLeaveGame }, dispatch] = useGameContext();\n\n  if (!showLeaveGame) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"boardOverlayContainer\">\n      <div>Are you sure?</div>\n      <Link to=\"/new\" className=\"pill leaveGameConfirmation\">\n        Yes\n      </Link>\n      <a\n        className=\"pill leaveGameConfirmation\"\n        onClick={() => {\n          dispatch({ type: 'leave_game', value: false });\n        }}\n      >\n        No\n      </a>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { GameOver } from './GameOver';\nimport LeaveGame from './LeaveGame';\n\nexport function BoardOverlay() {\n  return (\n    <>\n      <GameOver />\n      <LeaveGame />\n    </>\n  );\n}\n","import React, { ReactElement } from 'react';\n\nconst HIGHLIGHT_SIZE = 5;\ntype Props = { element: ReactElement };\nexport default function Ghosted({ element }: Props) {\n  return React.cloneElement(element, {\n    style: {\n      ...element.props.style,\n      marginLeft: element.props.style.marginLeft - HIGHLIGHT_SIZE,\n      marginTop: element.props.style.marginTop - HIGHLIGHT_SIZE,\n      width: element.props.style.width + HIGHLIGHT_SIZE * 2,\n      height: element.props.style.height + HIGHLIGHT_SIZE * 2,\n      filter: \"opacity(0.4) blur(2px) grayscale(1)\",\n    },\n  });\n}\n","import React, { ReactElement } from 'react';\n\nconst HIGHLIGHT_SIZE = 5;\ntype Props = { element: ReactElement };\nexport default function Highlight({ element }: Props) {\n  return React.cloneElement(element, {\n    style: {\n      ...element.props.style,\n      marginLeft: element.props.style.marginLeft - HIGHLIGHT_SIZE,\n      marginTop: element.props.style.marginTop - HIGHLIGHT_SIZE,\n      width: element.props.style.width + HIGHLIGHT_SIZE * 2,\n      height: element.props.style.height + HIGHLIGHT_SIZE * 2,\n      filter: 'drop-shadow(0px 0px 12px yellow)',\n    },\n  });\n}\n","export default class Point {\n  x: number;\n  y: number;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import { Dispatch, SetStateAction, useEffect, useMemo, useState } from 'react';\n\nimport Point from '../../common/Point';\nimport { Position } from '../../common/types';\nimport getDimension from '../utils/getDimension';\n\nexport function useDraggablePiece(\n  element: React.RefObject<HTMLImageElement>,\n  size: number,\n  boardSize: number,\n  position: Position\n): [number, number, Dispatch<SetStateAction<boolean>>] {\n  const [dragging, setDragging] = useState(false);\n  const [mousePos, setMousePos] = useState<Point | null>(null);\n\n  const j = Math.floor(position / 5);\n  const i = position - j * 5;\n\n  const { padding, spacing } = useMemo(\n    () => getDimension(boardSize),\n    [boardSize]\n  );\n\n  useEffect(() => {\n    const board = element.current?.parentElement;\n    if (board == null) return;\n    if (!dragging) return;\n\n    const onDragEnd = (e: UIEvent) => {\n      setDragging(false);\n      e.preventDefault();\n    };\n\n    const onDrag = (e: MouseEvent | DragEvent) => {\n      if (dragging) {\n        e.preventDefault();\n        setMousePos(new Point(e.x, e.y));\n      }\n    };\n\n    const onTouchMove = (e: TouchEvent) => {\n      if (dragging) {\n        e.preventDefault();\n        const _e = e.touches.item(0);\n        if (_e != null) {\n          setMousePos(new Point(_e.clientX, _e.clientY));\n        }\n      }\n    };\n\n    board.addEventListener('mouseup', onDragEnd);\n    board.addEventListener('dragend', onDragEnd);\n    board.addEventListener('touchend', onDragEnd);\n\n    board.addEventListener('drag', onDrag);\n    board.addEventListener('mousemove', onDrag);\n    board.addEventListener('touchmove', onTouchMove, { passive: false });\n\n    return () => {\n      board.removeEventListener('mouseup', onDragEnd);\n      board.removeEventListener('dragend', onDragEnd);\n      board.removeEventListener('touchend', onDragEnd);\n\n      board.removeEventListener('drag', onDrag);\n      board.removeEventListener('mousemove', onDrag);\n      board.removeEventListener('touchmove', onTouchMove);\n      setMousePos(null);\n    };\n  }, [dragging, element.current]);\n\n  if (dragging && mousePos) {\n    const parentLeft =\n      element.current?.parentElement?.getBoundingClientRect().left;\n    const parentTop =\n      element.current?.parentElement?.getBoundingClientRect().top;\n    const marginLeft =\n      mousePos.x - size / 2 - (parentLeft == null ? 0 : parentLeft);\n    const marginTop =\n      mousePos.y - size / 2 - (parentTop == null ? 0 : parentTop);\n\n    return [marginLeft, marginTop, setDragging];\n  } else {\n    return [\n      padding + i * spacing - size / 2,\n      padding + j * spacing - size / 2,\n      setDragging,\n    ];\n  }\n}\n","import React, { MouseEventHandler, ReactElement, useRef } from 'react';\n\nimport Ghosted from '../../common/Ghosted';\nimport Goat from '../../common/Goat';\nimport Highlight from '../../common/Highlight';\nimport { Position } from '../../common/types';\nimport useGameContext from '../../reducers/useGameContext';\nimport useGameState from '../reducers/useGameState';\nimport { gameOver, isTurn } from '../utils/turn';\nimport { useDraggablePiece } from './useDraggablePiece';\n\ntype Props = {\n  boardSize: number;\n  position: Position;\n  selected: boolean;\n  type: 'highlight' | 'gray' | 'default';\n};\nexport default function GoatPiece({\n  boardSize,\n  position,\n  selected,\n  type,\n}: Props): ReactElement {\n  const [state, stateDispatch] = useGameState();\n  const gameContext = useGameContext()[0];\n  const size = selected ? 90 : 70;\n  const goat = useRef<HTMLImageElement>(null);\n\n  const [marginLeft, marginTop, setDragging] = useDraggablePiece(\n    goat,\n    size,\n    boardSize,\n    position\n  );\n  const pieceClicked = () => {\n    if (gameOver(gameContext)) return;\n    if (isTurn(state, gameContext.designation)) {\n      if (state.selectedPiece == null || position == null) {\n        stateDispatch({ type: 'select', value: position });\n      } else {\n        stateDispatch({ type: 'move', value: position });\n      }\n    } else {\n      stateDispatch({ type: 'selected_without_turn' });\n    }\n  };\n\n  const pieceDragged: MouseEventHandler<HTMLImageElement> = (e) => {\n    if (gameOver(gameContext)) return;\n    if (isTurn(state, gameContext.designation)) {\n      setDragging(true);\n      e.preventDefault();\n      stateDispatch({ type: 'select', value: position });\n    }\n  };\n\n  const element = (\n    <Goat\n      ref={goat}\n      onMouseDown={pieceDragged}\n      onClick={pieceClicked}\n      style={{\n        marginLeft,\n        marginTop,\n        width: size,\n        height: size,\n      }}\n    />\n  );\n\n  if (type === 'highlight') {\n    return <Highlight element={element} />;\n  } else if (type === 'gray') {\n    return <Ghosted element={element} />;\n  }\n\n  return element;\n}\n","import React, { EventHandler, ReactElement, UIEvent, useRef } from 'react';\n\nimport Highlight from '../../common/Highlight';\nimport Tiger from '../../common/Tiger';\nimport { Position } from '../../common/types';\nimport useGameContext from '../../reducers/useGameContext';\nimport useGameState from '../reducers/useGameState';\nimport { gameOver, isTurn } from '../utils/turn';\nimport { useDraggablePiece } from './useDraggablePiece';\n\ntype Props = {\n  boardSize: number;\n  position: Position;\n  selected: boolean;\n  highlight: boolean;\n};\n\nexport default function TigerPiece({\n  boardSize,\n  position,\n  selected,\n  highlight,\n}: Props): ReactElement {\n  const [state, stateDispatch] = useGameState();\n  const gameContext = useGameContext()[0];\n  const size = selected ? 90 : 70;\n  const tiger = useRef<HTMLImageElement>(null);\n\n  const [marginLeft, marginTop, setDragging] = useDraggablePiece(\n    tiger,\n    size,\n    boardSize,\n    position\n  );\n  const pieceClicked = () => {\n    if (gameOver(gameContext)) return;\n    if (isTurn(state, gameContext.designation)) {\n      if (state.selectedPiece == null || position == null) {\n        stateDispatch({ type: \"select\", value: position });\n      } else {\n        stateDispatch({ type: \"move\", value: position });\n      }\n    } else {\n      stateDispatch({ type: \"selected_without_turn\" });\n    }\n  };\n\n  const pieceDragged: EventHandler<UIEvent> = (e) => {\n    e.preventDefault();\n    if (gameOver(gameContext)) return;\n\n    if (isTurn(state, gameContext.designation)) {\n      setDragging(true);\n      stateDispatch({ type: \"select\", value: position });\n    } else {\n      setDragging(false);\n    }\n  };\n\n  const element = (\n    <Tiger\n      ref={tiger}\n      onMouseDown={pieceDragged}\n      onTouchStart={pieceDragged}\n      onClick={pieceClicked}\n      style={{\n        marginLeft,\n        marginTop,\n        width: size,\n        height: size,\n      }}\n    />\n  );\n\n  return highlight ? <Highlight element={element} /> : element;\n}\n","import React from 'react';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport useGameState from '../reducers/useGameState';\nimport getHintHighlightPositions from '../utils/getHintHighlightPositions';\nimport { isTurn } from '../utils/turn';\nimport GoatPiece from './GoatPiece';\nimport TigerPiece from './TigerPiece';\n\nexport default function BoradPieces({ boardSize }: { boardSize: number }) {\n  const [state, __] = useGameState();\n  const [context, _] = useGameContext();\n\n  const [highlight, possibleNewPosForGoats] = getHintHighlightPositions(\n    state,\n    context\n  );\n\n  return (\n    <>\n      {state.tigers.map((position) => (\n        <TigerPiece\n          boardSize={boardSize}\n          position={position}\n          selected={position == state.selectedPiece}\n          highlight={highlight.has(position)}\n          key={position}\n        />\n      ))}\n      {state.goats.map((position) => (\n        <GoatPiece\n          boardSize={boardSize}\n          position={position}\n          selected={position == state.selectedPiece}\n          type={highlight.has(position) ? 'highlight' : 'default'}\n          key={position}\n        />\n      ))}\n      {state.selectedPiece != null &&\n      isTurn(state, 'goat') &&\n      !state.goats.includes(state.selectedPiece) ? (\n        <GoatPiece\n          boardSize={boardSize}\n          position={state.selectedPiece}\n          selected={false}\n          type=\"gray\"\n          key={state.selectedPiece}\n        />\n      ) : null}\n      {/* {possibleNewPosForGoats.map((position) => (\n        <GoatPiece\n          position={position}\n          selected={false}\n          type=\"gray\"\n          key={position}\n          onClick={() => pieceClicked(position)}\n        />\n      ))} */}\n    </>\n  );\n}\n","import { GameContext, GameState, Position } from '../../common/types';\nimport { canTigerEatGoat } from './canTigerEatGoat';\nimport { isAllGoatsPlayed } from './goats';\nimport { isTurn } from './turn';\nimport { adjancentPositions, ARR_0_TO_24 } from './validPositions';\n\nexport default function getHintHighlightPositions(\n  state: GameState,\n  { hint, designation }: GameContext\n): [Set<Position>, Position[]] {\n  const highlight = new Set<Position>();\n  let possibleNewPosForGoats: Position[] = [];\n  if (hint === true && isTurn(state, designation)) {\n    if (isTurn(state, 'goat')) {\n      if (isAllGoatsPlayed(state)) {\n        state.goats.forEach((goat) => {\n          adjancentPositions[goat].forEach((adjPos) => {\n            if (\n              !state.goats.includes(adjPos) &&\n              !state.tigers.includes(adjPos)\n            ) {\n              // if nobody nearby\n              highlight.add(goat);\n            }\n          });\n        });\n      } else {\n        // show potential place to drop goats\n        possibleNewPosForGoats = ARR_0_TO_24.filter(\n          (pos) => !state.goats.includes(pos) && !state.tigers.includes(pos)\n        );\n      }\n    } else if (isTurn(state, 'tiger')) {\n      state.tigers.forEach((tiger) => {\n        adjancentPositions[tiger].forEach((adjPos) => {\n          if (state.goats.includes(adjPos)) {\n            // has goats, so check if can eat\n            if (canTigerEatGoat(state.tigers, state.goats, tiger, adjPos)) {\n              highlight.add(tiger);\n            }\n          } else if (!state.tigers.includes(adjPos)) {\n            // not blocked by other tigers\n            highlight.add(tiger);\n          }\n        });\n      });\n    }\n  }\n\n  return [highlight, possibleNewPosForGoats];\n}\n","import React, { ReactNode, useMemo } from 'react';\n\nimport { Position } from '../../common/types';\nimport useGameContext from '../../reducers/useGameContext';\nimport { gameStateReducer } from '../reducers/gameStateReducer';\nimport useGameState from '../reducers/useGameState';\nimport { getScore } from '../utils/bestBotMove';\nimport getDimension from '../utils/getDimension';\nimport { isAllGoatsPlayed } from '../utils/goats';\nimport { getPossibleMovesForGoat, getPossibleMovesForTiger } from '../utils/possibleMoves';\nimport { isTurn } from '../utils/turn';\nimport { ARR_0_TO_24, isEmptySpace } from '../utils/validPositions';\n\nexport function DebugPieceOverlay({ boardSize }: { boardSize: number }) {\n  const [state, _] = useGameState();\n  const [context, __] = useGameContext();\n  const botLevel = context.botLevel ? context.botLevel : 2;\n\n  if (isTurn(state, 'goat') && isAllGoatsPlayed(state)) {\n    return (\n      <>\n        {state.goats.map((position) => {\n          const possibleMoves = getPossibleMovesForGoat(position, state);\n          const scores = possibleMoves.map(([from, to]) => {\n            const newState = gameStateReducer(state, {\n              type: 'move_directly',\n              from,\n              to,\n            });\n            return getScore(newState, botLevel);\n          });\n          return (\n            <DebugInfo boardSize={boardSize} position={position} key={position}>\n              {possibleMoves.map((v, i) => (\n                <>\n                  {v[1]} -&gt; {-scores[i]}\n                  <br />\n                </>\n              ))}\n            </DebugInfo>\n          );\n        })}\n      </>\n    );\n  } else if (isTurn(state, 'goat') /* need to place goats*/) {\n    return (\n      <>\n        {ARR_0_TO_24.filter((position) =>\n          isEmptySpace(position, state.goats, state.tigers)\n        ).map((position) => {\n          const newState = gameStateReducer(state, {\n            type: 'move_directly',\n            from: position,\n            to: position,\n          });\n          const score = getScore(newState, botLevel);\n\n          return (\n            <DebugInfo boardSize={boardSize} position={position} key={position}>\n              {-score}\n            </DebugInfo>\n          );\n        })}\n      </>\n    );\n  } else {\n    return (\n      <>\n        {state.tigers.map((position) => {\n          const possibleMoves = getPossibleMovesForTiger(\n            position,\n            state.tigers,\n            state.goats\n          );\n          const scores = possibleMoves.map(([from, to]) => {\n            const newState = gameStateReducer(state, {\n              type: 'move_directly',\n              from,\n              to,\n            });\n            return getScore(newState, botLevel);\n          });\n\n          return (\n            <DebugInfo boardSize={boardSize} position={position} key={position}>\n              {possibleMoves.map((v, i) => (\n                <>\n                  {v[1]} -&gt; {scores[i]}\n                  <br />\n                </>\n              ))}\n            </DebugInfo>\n          );\n        })}\n      </>\n    );\n  }\n}\n\nfunction DebugInfo({\n  boardSize,\n  position,\n  children,\n}: {\n  boardSize: number;\n  position: Position;\n  children: ReactNode;\n}) {\n  const j = Math.floor(position / 5);\n  const i = position - j * 5;\n\n  const { padding, spacing } = useMemo(\n    () => getDimension(boardSize),\n    [boardSize]\n  );\n  const x = padding + i * spacing;\n  const y = padding + j * spacing;\n\n  return (\n    <div\n      style={{\n        marginLeft: x,\n        marginTop: y,\n        position: 'absolute',\n        backgroundColor: 'black',\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import '../../styles/Game.css';\n\nimport React, { ReactElement } from 'react';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport BoardDecor from './BoardDecor';\nimport { BoardOverlay } from './BoardOverlay';\nimport BoradPieces from './BoradPieces';\nimport { DebugPieceOverlay } from './DebugPieceOverlay';\n\nexport default function Board({\n  boardSize,\n}: {\n  boardSize: number;\n}): ReactElement {\n  const { debug } = useGameContext()[0];\n  return (\n    <div\n      className=\"boardContainer\"\n      style={{ width: boardSize, height: boardSize }}\n    >\n      <BoardDecor width={boardSize} height={boardSize} />\n      <BoradPieces boardSize={boardSize} />\n      {debug && <DebugPieceOverlay boardSize={boardSize} />}\n      <BoardOverlay />\n    </div>\n  );\n}\n","import { GameState, Move } from '../../common/types';\nimport { getPossibleMovesForGoats, getPossibleMovesForTigers } from './possibleMoves';\nimport { getTurn } from './turn';\n\nfunction getRandomMove(state: GameState): Move | null {\n  const turn = getTurn(state);\n  let possibleMoves: Move[];\n  if (turn == 'tiger') {\n    possibleMoves = getPossibleMovesForTigers(state);\n  } /* goat */ else {\n    possibleMoves = getPossibleMovesForGoats(state);\n  }\n\n  if (possibleMoves.length == 0) return null;\n\n  const moveIndex = Math.floor(Math.random() * possibleMoves.length);\n  return possibleMoves[moveIndex];\n}\n\nexport function getScoredMove(\n  state: GameState,\n  level: number,\n  onMove: (scoredMove: Move | null) => void\n) {\n  if (level == 0) {\n    onMove(getRandomMove(state));\n    return;\n  }\n  const worker = new Worker(new URL('./bestBotMove.ts', import.meta.url));\n  worker.onmessage = (ev) => {\n    onMove(ev.data);\n  };\n\n  worker.postMessage({\n    type: 'best_bot_move',\n    state,\n    level,\n  });\n}\n","import React, { ReactElement, useEffect, useRef } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\nimport { ServerData } from '../common/types';\nimport useGameContext from '../reducers/useGameContext';\nimport Board from './Board/Board';\nimport useGameState from './reducers/useGameState';\nimport { getScoredMove } from './utils/moveSelector';\nimport { gameOver, getTurn } from './utils/turn';\n\nexport default function BoardContainer({\n  boardSize,\n}: {\n  boardSize: number;\n}): ReactElement {\n  const [state, stateDispatch] = useGameState();\n  const [gameContext, contextDispatch] = useGameContext();\n  const { userId, gameHash, gameType, designation, botLevel } = gameContext;\n  const prevTurn = useRef(getTurn(state));\n  const socketRef = useRef<Socket | null>(null);\n\n  useEffect(() => {\n    if (gameType == \"p2p_internet\") {\n      const socket = io({ auth: { token: gameHash } })\n        .onAny((event, args) => {\n          console.log(\"received\", event, args);\n        })\n        .onAnyOutgoing((event, args) => {\n          console.log(\"sending\", event, args);\n        })\n        .on(\"connect_error\", (err) => {\n          console.log(`connect_error due to ${err.message}`);\n        })\n        .on(\"movepiece\", (data: ServerData) => {\n          // TODO verify opponent's userId after storing it for first time\n          // use opponent id instead of players count\n          if (data.gameHash == gameHash) {\n            prevTurn.current = getTurn(state) == \"goat\" ? \"tiger\" : \"goat\";\n            stateDispatch({ type: \"server\", value: data.moves });\n          }\n        })\n        .once(\"opponentJoined\", (opponentId) => {\n          contextDispatch({ type: \"set_opponent\", opponentId });\n        })\n        .emit(\"gamejoined\", { userId, gameHash });\n\n      socketRef.current = socket;\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, [gameType, gameHash]);\n\n  useEffect(() => {\n    if (gameOver(gameContext)) return;\n    if (gameType == \"p2p_internet\") {\n      if (prevTurn.current == getTurn(state)) return;\n      prevTurn.current = getTurn(state);\n\n      try {\n        socketRef!.current!.emit(\"movepiece\", {\n          userId,\n          gameHash,\n          moves: state.moves,\n        });\n      } catch (err) {\n        // TODO user server disconnected error message\n      }\n    } else if (gameType == \"bot\") {\n      // user's turn so let them play\n      if (\n        getTurn(state) == designation ||\n        designation == null ||\n        state == null\n      ) {\n        return;\n      }\n\n      stateDispatch({ type: \"bot_thinking\" });\n      getScoredMove(state, botLevel ? botLevel : 2, (selectedMove) => {\n        if (selectedMove != null) {\n          const [from, to] = selectedMove;\n          // give user feel by waiting\n          stateDispatch({ type: \"select\", value: from });\n          setTimeout(() => {\n            stateDispatch({ type: \"move\", value: to });\n          }, 1000);\n        }\n      });\n    } else if (gameType == \"self\") {\n      // update the designation after each turn as you are playing with yourself\n      contextDispatch({\n        type: \"designate\",\n        value: getTurn(state),\n      });\n    }\n  }, [state.moves, gameType]);\n\n  return <Board boardSize={boardSize} />;\n}\n","import React, { useEffect, useRef } from 'react';\n\nimport { Position } from '../common/types';\nimport useGameContext from '../reducers/useGameContext';\nimport useGameState from './reducers/useGameState';\nimport { getTurn } from './utils/turn';\n\nexport default function Debug() {\n  const context = useGameContext()[0];\n  const state = useGameState()[0];\n  const prevState = useRef(state);\n  const prevContext = useRef(context);\n\n  useEffect(() => {\n    console.debug('=======DEBUG=======', 'turn', getTurn(state));\n    if (prevContext.current != context) {\n      for (let prop in context) {\n        // @ts-ignore\n        if (context[prop] != prevContext.current[prop]) {\n          // @ts-ignore\n          console.debug(prop, context[prop]);\n        }\n      }\n      prevContext.current = context;\n    }\n    if (prevState.current != state) {\n      for (let prop in state) {\n        // @ts-ignore\n        if (state[prop] != prevState.current[prop]) {\n          if (prop == 'moves') {\n            console.debug(\n              prop,\n              // @ts-ignore\n              state[prop]\n                .slice(prevState.current[prop].length)\n                .reduce(\n                  (acc: string, value: [Position, Position]) =>\n                    `${acc} [${value[0]} => ${value[1]}]`,\n                  '...'\n                )\n            );\n          } else {\n            // @ts-ignore\n            console.debug(prop, state[prop]);\n          }\n        }\n      }\n      prevState.current = state;\n    }\n  }, [context, state]);\n\n  return <></>;\n}\n","import '../../styles/common.css';\nimport '../../styles/GoatCounter.css';\n\nimport React from 'react';\n\nimport Goat from '../../common/Goat';\nimport { MAX_GOATS } from '../../common/types';\nimport useGameState, { GameStateContextReducer } from '../reducers/useGameState';\nimport { getNumberOfGoatsPlayed } from '../utils/goats';\n\nexport default function GoatCounter() {\n  const [state, _]: GameStateContextReducer = useGameState();\n\n  return (\n    <div className=\"goatCountContainer pill\">\n      <div className=\"counter\">\n        {MAX_GOATS - getNumberOfGoatsPlayed(state)} / 20\n      </div>\n      <div className=\"goatImage\">\n        <Goat height={64} />\n      </div>\n    </div>\n  );\n}\n","import '../../styles/common.css';\n\nimport React from 'react';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport hintIcon from './hintIcon.png';\n\nexport default function Hint({ fixed }: { fixed: boolean }) {\n  const [state, dispatch] = useGameContext();\n  return (\n    <button\n      className={state.hint ? 'pill activePill' : 'pill'}\n      onClick={() => dispatch({ type: state.hint ? 'nohint' : 'hint' })}\n    >\n      {fixed ? <img alt=\"hint\" src={hintIcon} /> : 'Hint'}\n    </button>\n  );\n}\n","import '../../styles/common.css';\n\nimport React from 'react';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport leaveIcon from './leaveIcon.png';\n\nexport default function LeaveGameButton({ fixed }: { fixed: boolean }) {\n  const dispatch = useGameContext()[1];\n  return (\n    <button\n      className=\"pill\"\n      onClick={() => {\n        dispatch({ type: 'leave_game', value: true });\n      }}\n    >\n      {fixed ? <img alt=\"leave\" src={leaveIcon} /> : 'Leave Game'}\n    </button>\n  );\n}\n","import '../../styles/common.css';\n\nimport React from 'react';\n\nimport settingsIcon from './settingsIcon.png';\n\nexport default function Options({ fixed }: { fixed: boolean }) {\n  return (\n    <button className=\"pill\" disabled={true}>\n      {fixed ? <img alt=\"options\" src={settingsIcon} /> : 'Options'}\n    </button>\n  );\n}\n","import '../../styles/common.css';\n\nimport React from 'react';\n\nimport replayIcon from './replayIcon.png';\n\nexport default function Replay({ fixed }: { fixed: boolean }) {\n  return (\n    <button className=\"pill\" disabled={true}>\n      {fixed ? <img alt=\"replay\" src={replayIcon} /> : 'Replay'}\n    </button>\n  );\n}\n","import '../../styles/common.css';\nimport '../../styles/GameInfoAndButtons.css';\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport rulesIcon from './rulesIcon.png';\n\nexport default function RulesButton({ fixed }: { fixed: boolean }) {\n  return (\n    <Link to=\"/game/rules\" className=\"pill rulesButton\">\n      {fixed ? <img alt=\"rules\" src={rulesIcon} /> : 'Rules'}\n    </Link>\n  );\n}\n","import '../../styles/GameInfoAndButtons.css';\n\nimport React from 'react';\n\nimport GoatCounter from './GoatCounter';\nimport Hint from './Hint';\nimport LeaveGameButton from './LeaveGameButton';\nimport Options from './Options';\nimport Replay from './Replay';\nimport RulesButton from './RulesButton';\n\nexport default function GameInfoAndButtons({ fixed }: { fixed: boolean }) {\n  return (\n    <>\n      {fixed && <GoatCounter />}\n      <div\n        className={\n          fixed\n            ? 'gameInfoAndButtonsContainerFixed'\n            : 'gameInfoAndButtonsContainer'\n        }\n      >\n        {!fixed && <GoatCounter />}\n        <Hint fixed={fixed} />\n        <RulesButton fixed={fixed} />\n        <Options fixed={fixed} />\n        <Replay fixed={fixed} />\n        <LeaveGameButton fixed={fixed} />\n      </div>\n    </>\n  );\n}\n","import { GameState, PieceType, Position } from '../../common/types';\nimport { canTigerEatGoat } from './canTigerEatGoat';\nimport { isAllGoatsPlayed } from './goats';\nimport { isTurn } from './turn';\nimport { adjancentPositions } from './validPositions';\n\nexport function getWinner(state: GameState): PieceType | null {\n  if (isTurn(state, 'goat') && checkIfGoatLost(state)) {\n    return 'tiger';\n  } else if (isTurn(state, 'tiger') && checkIfTigerLost(state)) {\n    return 'goat';\n  }\n  return null;\n}\n\nfunction checkIfTigerLost(state: GameState) {\n  // check if tiger has moves\n  const tigerHasMoves = Array.from(state.tigers).some((tigerPos) =>\n    Array.from(adjancentPositions[tigerPos]).some((adjPos) => {\n      // adjacent is not occuppied\n      if (!isOccupied(state, adjPos)) {\n        return true;\n      }\n      // adjancet has goat and can be eaten\n      if (state.goats.includes(adjPos)) {\n        if (\n          canTigerEatGoat(state.tigers, state.goats, tigerPos, adjPos) != null\n        ) {\n          return true;\n        }\n      }\n    })\n  );\n\n  return !tigerHasMoves;\n}\n\nfunction checkIfGoatLost(state: GameState) {\n  // check if there are no more goats\n  if (state.goats.length === 0 && isAllGoatsPlayed(state)) {\n    return true;\n  }\n\n  // check if goats has moves\n  const goatHasMoves = Array.from(state.goats).some((goatPos) =>\n    Array.from(adjancentPositions[goatPos]).some((adjPos) => {\n      if (!isOccupied(state, adjPos)) {\n        return true;\n      }\n    })\n  );\n\n  if (goatHasMoves) {\n    return false;\n  }\n\n  return isAllGoatsPlayed(state);\n}\n\nfunction isOccupied(state: GameState, position: Position) {\n  return state.goats.includes(position) || state.tigers.includes(position);\n}\n","import '../../styles/GameHeader.css';\n\nimport React from 'react';\n\nexport default function MessageBanner({ message }: { message: string }) {\n  return (\n    <div className=\"messageBanner\">\n      <div>{message}</div>\n    </div>\n  );\n}\n","import '../../styles/common.css';\nimport '../../styles/GameHeader.css';\n\nimport React from 'react';\n\nimport Goat from '../../common/Goat';\nimport Highlight from '../../common/Highlight';\nimport Tiger from '../../common/Tiger';\nimport useGameContext from '../../reducers/useGameContext';\nimport useGameState from '../reducers/useGameState';\nimport { isTurn } from '../utils/turn';\n\nconst IMG_SIZE = 60;\n\nexport default function Turn() {\n  const [state, _] = useGameState();\n  const [{ designation, gameType }, __] = useGameContext();\n\n  const tiger =\n    designation === 'tiger' && gameType !== 'self' ? 'You' : 'Tiger';\n  const goat = designation === 'goat' && gameType !== 'self' ? 'You' : 'Goat';\n\n  if (isTurn(state, 'tiger')) {\n    return (\n      <>\n        <div className=\"hasturn\">\n          <div>{tiger}</div>\n          <Highlight\n            element={\n              <Tiger\n                style={{\n                  marginLeft: 0,\n                  marginTop: 0,\n                  height: IMG_SIZE,\n                  width: IMG_SIZE,\n                }}\n              />\n            }\n          />\n        </div>\n        <div className=\"notaturn\">\n          <Goat height={IMG_SIZE} />\n          <div>{goat}</div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"notaturn\">\n          <div>{tiger}</div>\n          <Tiger height={IMG_SIZE} />\n        </div>\n        <div className=\"hasturn\">\n          <Highlight\n            element={\n              <Goat\n                style={{\n                  marginLeft: -IMG_SIZE,\n                  marginTop: 0,\n                  height: IMG_SIZE,\n                  width: IMG_SIZE,\n                }}\n              />\n            }\n          />\n          <div>{goat}</div>\n        </div>\n      </>\n    );\n  }\n}\n","import '../../styles/GameHeader.css';\n\nimport React from 'react';\n\nimport { Loading } from '../../common/Loading';\n\nexport default function WaitingForOtherPlayer() {\n  return (\n    <div className=\"messageBanner\">\n      <div>Waiting for the other player</div>\n      <Loading />\n    </div>\n  );\n}\n","import '../../styles/GameHeader.css';\n\nimport React, { useEffect } from 'react';\n\nimport useGameContext from '../../reducers/useGameContext';\nimport useGameState from '../reducers/useGameState';\nimport { getWinner } from '../utils/winner';\nimport MessageBanner from './MessageBanner';\nimport Turn from './Turn';\nimport WaitingForOtherPlayer from './WaitingForOtherPlayer';\n\nexport default function GameHeader() {\n  const [{ gameType, opponentId }, contextDispatcher] = useGameContext();\n  const [state, stateDispatcher] = useGameState();\n\n  useEffect(() => {\n    const winner = getWinner(state);\n    if (winner) {\n      contextDispatcher({ type: 'set_winner', value: winner });\n      stateDispatcher({ type: 'gameover', value: winner });\n    }\n  }, [state.moves]);\n\n  return (\n    <div className=\"pill turnContainer\">\n      {gameType === 'p2p_internet' && opponentId === null && (\n        <WaitingForOtherPlayer />\n      )}\n      {state.message == null && <Turn />}\n      {state.message != null && <MessageBanner message={state.message} />}\n    </div>\n  );\n}\n","const MAX_BOARD_SIZE = 700;\nconst HEADER_SIZE = 120;\nconst SIDE_BUTTONS_SIZE = 200;\nconst FIXED_BOTTOM_SIZE = 60;\nconst HORIZ_PADDING = 20;\n\nexport function getBoardSizeProps(): [number, boolean] /* size, isPotrait */ {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  const maxBoardSizeIfPotrait = Math.min(\n    height - FIXED_BOTTOM_SIZE - HEADER_SIZE,\n    width - HORIZ_PADDING\n  );\n  const maxBoardSizeIfLandscape = Math.min(\n    height - HEADER_SIZE,\n    width - SIDE_BUTTONS_SIZE\n  );\n\n  return [\n    Math.min(\n      Math.max(maxBoardSizeIfPotrait, maxBoardSizeIfLandscape),\n      MAX_BOARD_SIZE\n    ),\n    maxBoardSizeIfLandscape <= maxBoardSizeIfPotrait,\n  ];\n}\n","import '../styles/Game.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport useGameContext from '../reducers/useGameContext';\nimport BoardContainer from './BoardContainer';\nimport Debug from './Debug';\nimport GameInfoAndButtons from './GameStatus/GameInfoAndButtons';\nimport GameHeader from './Header/GameHeader';\nimport useGameState from './reducers/useGameState';\nimport { getBoardSizeProps } from './utils/getBoardSizeProps';\nimport useInitializeStates from './utils/useInitializeStates';\n\nexport default function Game() {\n  const [[size, isPotrait], setSizeProps] = useState(getBoardSizeProps());\n  const stateDispatch = useGameState()[1];\n  const { debug } = useGameContext()[0];\n\n  useInitializeStates(stateDispatch);\n\n  useEffect(() => {\n    function handleResize() {\n      setSizeProps(getBoardSizeProps());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <div className=\"gameContainer\">\n      <div className=\"content\">\n        <div>\n          {debug && <Debug />}\n          <GameHeader />\n          <BoardContainer boardSize={size} />\n        </div>\n        <GameInfoAndButtons fixed={isPotrait} />\n      </div>\n    </div>\n  );\n}\n","import { Dispatch, useEffect } from 'react';\nimport { useLoaderData, useLocation, useNavigate } from 'react-router-dom';\n\nimport { GameStateActions } from '../../common/types';\nimport useGameContext from '../../reducers/useGameContext';\n\nexport default function useInitializeStates(\n  stateDispatch: Dispatch<GameStateActions>\n) {\n  // @ts-ignore\n  const loaderData: ResumeGameData = useLoaderData();\n  const [gameContext, dispatch] = useGameContext();\n  const { state } = useLocation();\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (loaderData == null && state == null) {\n      navigate('/');\n      return;\n    }\n\n    if (state.gameHash == gameContext.gameHash) {\n      return;\n    }\n\n    switch (loaderData?.gameType || state?.gameType) {\n      case 'p2p_internet': {\n        dispatch({\n          type: 'new_game',\n          ...loaderData,\n        });\n        stateDispatch({ type: 'server', value: loaderData.moves });\n        return;\n      }\n      case 'bot': {\n        dispatch({\n          type: 'new_game',\n          ...state,\n        });\n        return;\n      }\n      case 'self': {\n        dispatch({\n          type: 'new_game',\n          ...state,\n        });\n        return;\n      }\n      default: {\n        console.error('not implemented!');\n      }\n    }\n  }, [loaderData, state]);\n}\n","import { GameState, MAX_GOATS, Move } from '../../common/types';\nimport { gameStateReducer } from '../reducers/gameStateReducer';\nimport { getNumberOfGoatsPlayed, isAllGoatsPlayed } from './goats';\nimport {\n    getPossibleMovesForGoats, getPossibleMovesForTiger, getPossibleMovesForTigers\n} from './possibleMoves';\nimport { getTurn } from './turn';\n\nconst GOAT_WIN_SCORE = -20;\nconst TIGER_WIN_SCORE = 20;\n\n// eslint-disable-next-line no-restricted-globals\nself.onmessage = (\n  ev: MessageEvent<{\n    type: 'best_bot_move';\n    state: GameState;\n    level: number;\n  }>\n) => {\n  if (ev.data?.type != 'best_bot_move') return;\n  const { state, level } = ev.data;\n  if (level == null) {\n    console.error('bot smartness level missing');\n    return;\n  }\n  const turn = getTurn(state);\n\n  let possibleMoves: Move[];\n  if (turn == 'tiger' /* bot is tiger */) {\n    possibleMoves = getPossibleMovesForTigers(state);\n  } /* bot is goat */ else {\n    possibleMoves = getPossibleMovesForGoats(state);\n  }\n\n  if (possibleMoves.length == 0) {\n    // eslint-disable-next-line no-restricted-globals\n    self.postMessage(null);\n    return null;\n  }\n\n  const scores = possibleMoves.map(([from, to]) => {\n    const newState = gameStateReducer(state, {\n      type: 'move_directly',\n      from,\n      to,\n    });\n    return getScore(newState, level);\n  });\n\n  let bestScore = scores[0];\n  let possibleMove = possibleMoves[0];\n  for (let i = 1; i < scores.length; i++) {\n    if (\n      (scores[i] > bestScore && turn == 'tiger') ||\n      (scores[i] < bestScore && turn == 'goat')\n    ) {\n      possibleMove = possibleMoves[i];\n      bestScore = scores[i];\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  self.postMessage(possibleMove);\n};\n\nexport function getScore(\n  state: GameState,\n  depth: number,\n  tigerRunningScore: number = GOAT_WIN_SCORE,\n  goatRunningScore: number = TIGER_WIN_SCORE\n): number {\n  const turn = getTurn(state);\n  const score = calcScoreForTiger(state);\n  if (depth == 0 || score == GOAT_WIN_SCORE || score == TIGER_WIN_SCORE) {\n    return score;\n  }\n\n  if (/* goal is -20 */ turn == 'goat') {\n    let value = TIGER_WIN_SCORE;\n    const possibleMoves = getPossibleMovesForGoats(state);\n    for (const i in possibleMoves) {\n      const newState = gameStateReducer(state, {\n        type: 'move_directly',\n        from: possibleMoves[i][0],\n        to: possibleMoves[i][1],\n      });\n      value = Math.min(\n        value,\n        getScore(newState, depth - 1, tigerRunningScore, goatRunningScore)\n      );\n      if (value < tigerRunningScore) {\n        break;\n      }\n      goatRunningScore = Math.min(goatRunningScore, value);\n    }\n    return value;\n  } /* turn is tiger, goal is +20 */ else {\n    let value = GOAT_WIN_SCORE;\n    const possibleMoves = getPossibleMovesForTigers(state);\n\n    for (const i in possibleMoves) {\n      const newState = gameStateReducer(state, {\n        type: 'move_directly',\n        from: possibleMoves[i][0],\n        to: possibleMoves[i][1],\n      });\n      value = Math.max(\n        value,\n        getScore(newState, depth - 1, tigerRunningScore, goatRunningScore)\n      );\n      if (value > goatRunningScore) {\n        break;\n      }\n      tigerRunningScore = Math.max(tigerRunningScore, value);\n    }\n    return value;\n  }\n}\n\nfunction calcScoreForTiger(state: GameState): number {\n  // if 1 tiger blocked -5\n  // if 1 goat eaten +1\n  // target score is +20 for tiger, -20 for goat\n\n  const allGoatsPlaced = isAllGoatsPlayed(state);\n  const numOfGoatsEaten = allGoatsPlaced\n    ? MAX_GOATS - state.goats.length\n    : getNumberOfGoatsPlayed(state) - state.goats.length;\n\n  let numOfTigersBlocked = state.tigers\n    .map(\n      (tiger) =>\n        getPossibleMovesForTiger(tiger, state.tigers, state.goats).length\n    )\n    .filter((possibleMoves) => possibleMoves == 0).length;\n\n  return numOfGoatsEaten - numOfTigersBlocked * 5;\n}\n","import { GameState, Move, Position } from '../../common/types';\nimport { canTigerEatGoat } from './canTigerEatGoat';\nimport { isAllGoatsPlayed } from './goats';\nimport { adjancentPositions, getAllEmptySpaces, isEmptySpace } from './validPositions';\n\nexport function getPossibleMovesForTigers({\n  tigers,\n  goats,\n}: GameState): Move[] {\n  const possibleMoves: Move[] = [];\n  tigers.forEach((from) => {\n    possibleMoves.push(...getPossibleMovesForTiger(from, tigers, goats));\n  });\n  return possibleMoves;\n}\n\nexport function getPossibleMovesForTiger(\n  from: Position,\n  tigers: Position[],\n  goats: Position[]\n): Move[] {\n  const possibleMoves: Move[] = [];\n  adjancentPositions[from].forEach((to) => {\n    if (tigers.includes(to)) return;\n    if (\n      isEmptySpace(to, goats, tigers) ||\n      canTigerEatGoat(tigers, goats, from, to) != null\n    ) {\n      possibleMoves.push([from, to]);\n    }\n  });\n  return possibleMoves;\n}\n\nexport function getPossibleMovesForGoats(state: GameState): Move[] {\n  if (isAllGoatsPlayed(state)) {\n    const possibleMoves: Move[] = [];\n    state.goats.forEach((from) => {\n      possibleMoves.push(...getPossibleMovesForGoat(from, state));\n    });\n    return possibleMoves;\n  } else {\n    return getAllEmptySpaces(state.tigers, state.goats).map((p) => [p, p]);\n  }\n}\n\nexport function getPossibleMovesForGoat(\n  from: Position,\n  state: GameState\n): Move[] {\n  const possibleMoves: Move[] = [];\n  adjancentPositions[from].forEach((to) => {\n    if (isEmptySpace(to, state.goats, state.tigers)) {\n      possibleMoves.push([from, to]);\n    }\n  });\n  return possibleMoves;\n}\n"],"names":["getDimension","canvasSize","padding","end","spacing","start","midPoint","getNearestBoardPosition","clientX","clientY","board","_getDimension","Math","min","getBoundingClientRect","width","height","clickTolerance","x","offsetLeft","y","offsetTop","i","round","j","actualX","actualY","BoardDecor","_ref","boardRef","useRef","_useGameState","useGameState","_useGameState2","_slicedToArray","state","stateDispatch","_useGameContext","useGameContext","_useGameContext2","gameContext","useEffect","gameOver","current","parentElement","onDragEnd","e","isTurn","designation","preventDefault","boardPosition","type","value","onTouchEnd","_e","changedTouches","item","onClick","selectedPiece","addEventListener","removeEventListener","moves","_jsx","alt","ref","src","GameOver","_Fragment","winner","gameType","displayText","concat","_jsxs","className","children","Link","to","LeaveGame","showLeaveGame","dispatch","BoardOverlay","HIGHLIGHT_SIZE","Ghosted","element","React","style","_objectSpread","props","marginLeft","marginTop","filter","Highlight","Point","_createClass","_classCallCheck","this","useDraggablePiece","size","boardSize","position","_useState","useState","_useState2","dragging","setDragging","_useState3","_useState4","mousePos","setMousePos","floor","_useMemo","useMemo","_element$current","onDrag","onTouchMove","touches","passive","_element$current2","_element$current2$par","_element$current3","_element$current3$par","parentLeft","left","parentTop","top","GoatPiece","selected","goat","_useDraggablePiece","_useDraggablePiece2","Goat","onMouseDown","TigerPiece","highlight","tiger","pieceDragged","Tiger","onTouchStart","BoradPieces","context","_getHintHighlightPosi","hint","Set","possibleNewPosForGoats","isAllGoatsPlayed","goats","forEach","adjancentPositions","adjPos","includes","tigers","add","ARR_0_TO_24","pos","canTigerEatGoat","getHintHighlightPositions","_getHintHighlightPosi2","map","has","DebugPieceOverlay","botLevel","possibleMoves","getPossibleMovesForGoat","scores","_ref2","_ref3","from","newState","gameStateReducer","getScore","DebugInfo","v","isEmptySpace","score","getPossibleMovesForTiger","_ref4","_ref5","_ref6","backgroundColor","Board","debug","getScoredMove","level","onMove","worker","Worker","URL","onmessage","ev","data","postMessage","getTurn","getPossibleMovesForTigers","getPossibleMovesForGoats","length","random","getRandomMove","BoardContainer","contextDispatch","userId","gameHash","prevTurn","socketRef","socket","io","auth","token","onAny","event","args","console","log","onAnyOutgoing","on","err","message","once","opponentId","emit","disconnect","selectedMove","_selectedMove","setTimeout","Debug","prevState","prevContext","prop","slice","reduce","acc","GoatCounter","MAX_GOATS","getNumberOfGoatsPlayed","Hint","fixed","hintIcon","LeaveGameButton","leaveIcon","Options","disabled","settingsIcon","Replay","replayIcon","RulesButton","rulesIcon","GameInfoAndButtons","getWinner","goatHasMoves","Array","some","goatPos","isOccupied","checkIfGoatLost","tigerHasMoves","tigerPos","checkIfTigerLost","MessageBanner","IMG_SIZE","Turn","_useGameContext2$","WaitingForOtherPlayer","Loading","GameHeader","contextDispatcher","stateDispatcher","MAX_BOARD_SIZE","HEADER_SIZE","SIDE_BUTTONS_SIZE","FIXED_BOTTOM_SIZE","HORIZ_PADDING","getBoardSizeProps","window","innerWidth","innerHeight","maxBoardSizeIfPotrait","maxBoardSizeIfLandscape","max","Game","_useState2$","isPotrait","setSizeProps","loaderData","useLoaderData","useLocation","navigate","useNavigate","error","useInitializeStates","handleResize","GOAT_WIN_SCORE","TIGER_WIN_SCORE","depth","tigerRunningScore","arguments","undefined","goatRunningScore","turn","allGoatsPlaced","numOfGoatsEaten","numOfTigersBlocked","calcScoreForTiger","self","_ev$data","_ev$data2","bestScore","possibleMove","push","apply","_toConsumableArray","getAllEmptySpaces","p"],"sourceRoot":""}